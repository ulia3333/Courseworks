
select * from items;
delete items;
drop table items;
create table Items
(
IdItem int generated by default as identity start with 1
    minvalue 1 
    maxvalue 1000000
    increment by 1
    cache 20
    primary key,
Name varchar(50) not null,
Cost number(6,2) not null,
IsDeleted CHAR(1) CHECK (IsDeleted IN ('1','0'))
);
-------------------------------------------------------------------------------------------

drop DIRECTORY IMPORTFILEXML;
CREATE DIRECTORY IMPORTFILEXML AS 'D:\6sem\????????\??\COFFE'
CREATE OR REPLACE FUNCTION ReadFileForImport(FileName NVARCHAR2)
RETURN XMLTYPE
AS
FileContent CLOB;
Buffer CLOB;
FileDescriptor UTL_FILE.FILE_TYPE;
BEGIN
FileDescriptor := UTL_FILE.FOPEN('IMPORTFILEXML', FileName, 'R');
LOOP
BEGIN
UTL_FILE.GET_LINE(FileDescriptor, Buffer);
FileContent := FileContent || Buffer;
EXCEPTION WHEN NO_DATA_FOUND THEN EXIT;
END;
END LOOP;

RETURN XMLTYPE(FileContent);
END;

CREATE OR REPLACE PROCEDURE ImportXMLItems(FileName VARCHAR2)
AS
FileContent     XMLTYPE;
    Name       NVARCHAR2(50);
    Cost       NUMBER(6,2);
    IsDeleted  CHAR(1);
    i INT DEFAULT 1;
BEGIN
FileContent := ReadFileForImport(FileName);
LOOP
BEGIN
SELECT EXTRACTVALUE(FileContent, '/data/row['||i||']/NAME') INTO Name FROM DUAL;
            SELECT EXTRACTVALUE(FileContent, '/data/row['||i||']/COST') INTO Cost FROM DUAL;
            SELECT EXTRACTVALUE(FileContent, '/data/row['||i||']/ISDELETED') INTO IsDeleted FROM DUAL;

IF Name IS NULL THEN EXIT;
END IF;
insert into Item(Name, Cost, IsDeleted) 
values (Name, Cost, IsDeleted);

i := i + 1;
END;

END LOOP;
exception
when others then dbms_output.put_line('Error');
END;
--------------------------------------
begin
  ImportXMLItems('items.xml');
end;

select * from Item;
delete item where Name like 'Item %';


------------------------------------------------------------------------------------------------------------------------------------------------



DROP DIRECTORY EXSPORTFILEXML;
CREATE DIRECTORY EXSPORTFILEXML AS 'D:\6sem\????????\??\COFFE';

create or replace procedure export_items
is
    rc sys_refcursor;
    doc DBMS_XMLDOM.DOMDocument;
begin
    open rc for select * from Item;
    doc := DBMS_XMLDOM.NewDomDocument(XMLTYPE(rc));
    DBMS_XMLDOM.WRITETOFILE(doc, 'EXSPORTFILEXML/items_export.xml');
end export_items;

BEGIN
    export_items;
END;

delete items;
select * from items

